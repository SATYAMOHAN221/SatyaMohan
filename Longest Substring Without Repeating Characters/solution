#include <iostream>
#include <unordered_map>
#include <string>

int lengthOfLongestSubstring(const std::string& s) {
    std::unordered_map<char, int> charIndexMap; // Stores characters and their latest index
    int maxLength = 0;
    int start = 0; // Start index of the current substring

    for (int end = 0; end < s.size(); end++) {
        char currentChar = s[end];

        // If the character is already in the map and its index is within the current substring
        if (charIndexMap.find(currentChar) != charIndexMap.end() && charIndexMap[currentChar] >= start) {
            start = charIndexMap[currentChar] + 1; // Move start to the right of the last occurrence
        }

        // Update the character's index in the map
        charIndexMap[currentChar] = end;

        // Update the max length if needed
        maxLength = std::max(maxLength, end - start + 1);
    }

    return maxLength;
}

int main() {
    std::string s = "abcabcbb";
    std::cout << "The length of the longest substring without repeating characters is: " 
              << lengthOfLongestSubstring(s) << std::endl;

    return 0;
}
